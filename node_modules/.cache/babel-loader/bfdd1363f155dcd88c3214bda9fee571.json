{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkt';\nconst initialState = {\n  counter: 0,\n  showCounter: true\n}; //create as many slices as there are different pieces of state (here the counter state) not directly related (ex: if an authenticate state is added)\n\ncreateSlice({\n  name: 'counter',\n  //a slice needs a name\n  initialState,\n  // = initialState: initialState\n  reducers: {\n    //it's an object of all the reducers this slice needs by adding methods that will automatically receive the latest state\n    increment(state) {\n      state.counter++; //allowed here because Redux Toolkit internally use a package (immer) to clone the existing state in a new state object keeping not editing states and overriding editing states in an immutable way\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      //if needed the reducer method can take action as an argument too to access an action payload\n      state.counter = state.counter + action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\n\nfunction counterReducer(state = initialState, action) {\n  if (action.type === 'increment') {\n    return {\n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'increase') {\n    return {\n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return {\n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return {\n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n\n  return state;\n}\n\n;\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["/Users/julie/code/Perso/react/react-complete-guide/counter_section18/src/store/index.js"],"names":["createStore","createSlice","initialState","counter","showCounter","name","reducers","increment","state","decrement","increase","action","amount","toggle","counterReducer","type","store"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,QAA4B,iBAA5B;AAEA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,OAAO,EAAE,CAAX;AAAcC,EAAAA,WAAW,EAAE;AAA3B,CAArB,C,CAEA;;AACAH,WAAW,CAAC;AACVI,EAAAA,IAAI,EAAE,SADI;AACS;AACnBH,EAAAA,YAFU;AAEM;AAChBI,EAAAA,QAAQ,EAAE;AAAK;AACbC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACL,OAAN,GADe,CACI;AACpB,KAHO;;AAIRM,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACL,OAAN;AACD,KANO;;AAORO,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AAAM;AAC5BH,MAAAA,KAAK,CAACL,OAAN,GAAgBK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,MAAvC;AACD,KATO;;AAWRC,IAAAA,MAAM,CAACL,KAAD,EAAQ;AACZA,MAAAA,KAAK,CAACJ,WAAN,GAAoB,CAACI,KAAK,CAACJ,WAA3B;AACD;;AAbO;AAHA,CAAD,CAAX;;AAoBA,SAASU,cAAT,CAAwBN,KAAK,GAAGN,YAAhC,EAA8CS,MAA9C,EAAsD;AACpD,MAAIA,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgBQ,MAAM,CAACC,MAD3B;AAELR,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,WAApB,EAAiC;AAC/B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OAAN,GAAgB,CADpB;AAELC,MAAAA,WAAW,EAAEI,KAAK,CAACJ;AAFd,KAAP;AAID;;AAED,MAAIO,MAAM,CAACI,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO;AACLZ,MAAAA,OAAO,EAAEK,KAAK,CAACL,OADV;AAELC,MAAAA,WAAW,EAAE,CAACI,KAAK,CAACJ;AAFf,KAAP;AAID;;AAGD,SAAOI,KAAP;AACD;;AAAA;AAED,MAAMQ,KAAK,GAAGhB,WAAW,CAACc,cAAD,CAAzB;AAEA,eAAeE,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice } from '@reduxjs/toolkt';\n\nconst initialState = { counter: 0, showCounter: true };\n\n//create as many slices as there are different pieces of state (here the counter state) not directly related (ex: if an authenticate state is added)\ncreateSlice({\n  name: 'counter',   //a slice needs a name\n  initialState,   // = initialState: initialState\n  reducers: {    //it's an object of all the reducers this slice needs by adding methods that will automatically receive the latest state\n    increment(state) {\n      state.counter++;   //allowed here because Redux Toolkit internally use a package (immer) to clone the existing state in a new state object keeping not editing states and overriding editing states in an immutable way\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {     //if needed the reducer method can take action as an argument too to access an action payload\n      state.counter = state.counter + action.amount;\n    },\n\n    toggle(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\n\nfunction counterReducer(state = initialState, action) {\n  if (action.type === 'increment') {\n    return { \n      counter: state.counter + 1,\n      showCounter: state.showCounter\n    };\n  }\n  \n  if (action.type === 'increase') {\n    return { \n      counter: state.counter + action.amount,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'decrement') {\n    return { \n      counter: state.counter - 1,\n      showCounter: state.showCounter\n    };\n  }\n\n  if (action.type === 'toggle') {\n    return { \n      counter: state.counter,\n      showCounter: !state.showCounter\n    };\n  }\n\n  \n  return state;\n};\n\nconst store = createStore(counterReducer);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}